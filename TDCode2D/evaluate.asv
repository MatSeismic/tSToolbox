function [ phiM, likelyhood ] = evaluate( xCell, yCell, tScell, allTS, allSig, dataE, dataX, dataY, interp_style)

    %first, assign nans if yCell or xCell is all the same number.
    %ScatteredInterpolant uses triangulation and can't operate if points
    %are colinear. 
    
    if length(unique(xCell))==1 || length(unique(yCell))==1
        phiM       = nan;
        likelyhood = nan;
        return        
    end

    xCell = double(xCell); yCell = double(yCell); tScell = double(tScell);
    F    = scatteredInterpolant(xCell(:), yCell(:), tScell(:), interp_style, 'linear');
    ptS = F(dataX,dataY);

    if any(any(isnan(ptS)))%nans show up for very closely spaced nodes (maybe?)

        F    = scatteredInterpolant(xCell(:), yCell(:), tScell(:), interp_style, interp_style);
        ptS(isnan(ptS)) = F(dataX(isnan(ptS)),dataY(isnan(ptS)));

    end

    %re-demean. The model may have nonzero mean but that's fine
    for k = 1:length(unique(dataE))

        ptS(dataE==k) = ptS(dataE==k) - mean(ptS(dataE==k));

    end

    phiM       = ((ptS - allTS))*diag(((1./allSig).^2))*((ptS - allTS))';
    likelyhood = sum(-log(allSig*sqrt(2*pi))*length(allTS) - 0.5*((ptS - allTS)./allSig).^2);
            
end